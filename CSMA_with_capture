function[simp,outp,C]=CSMA_cap(n,q0,runt,theta,K,a,x0,rth,r0)
%input parameters:
%n:  number of nodes in the network;
%q0: initial transmission probability of each node;
%runt: simlulation time in time slots;
%theta: aggregate input rate of all the nodes?
%K: cutoff phase
%a: mini-slot length
%x0: failure time
%rth: receiver threshold
%r0: mean recieved SNR

%output parameters:
%simp: simulated networks steady-state point;
%outp: simulated network throughput
%C: simulated network sum rate

aa=1/a;

lambdar=theta/n;

rts=x0;

ql=zeros(n,1);
hols=zeros(n,1);

ns=zeros(n,1);
nre=zeros(n,1);
nne=zeros(n,1);


ToH=zeros(n,1);
frH=zeros(n,1);

acdelay=0;

%for second moment of access delay
acdelay_sec=0;

outp=0;
mql=zeros(n,1);
p=zeros(n,1);
flag_ch=0;
xn=0;


inp=0;
for rt=1:runt
    
    % generate new packets
    for I=1:n
        x=rand;
        if x<lambdar/aa
            inp=inp+1;
            ql(I)=ql(I)+aa;
        end
        mql(I)=mql(I)+ql(I);
    end
    

    % set the transmission requests
    cons=zeros(n,1);
    for I=1:n
        if ql(I)~=0
            %set the time tag for the fresh HOL packet of each queue
            if frH(I)==0
                ToH(I)=rt;
                frH(I)=1;
            end
            
           
            % check the queue status and sense the channel
            if flag_ch==0           % channel is idle
                
                
                if rand < q0*(1/2)^(min(hols(I),K))
                    cons(I)=1;
                    nre(I)=nre(I)+1;
                end

                
            end
            nne(I)=nne(I)+1;
        end
    end




    if rts == 0 % deal with the case when x0=0
        
                % set the channel status
        if flag_ch==1  % channel is busy
            if xn==sx || xn>sx
                flag_ch=0;            
                xn=0;
            else
                xn=xn+1;
            end
        else
            
            if sum(cons)~=0
                flagc=cons;
                xn=1;
                %xn=0;
                
                succ=0;
                Erand=zeros(n,1);

                for i=1:n
                    if flagc(i)==1
                        Erand(i)=exprnd(1);
                    end
                end

                for i=1:n
                    if Erand(i)/(sum(Erand)-Erand(i)+1/r0) >= rth
                        %calculate the output
                        outp=outp+1;
                        %calculate the access delay
                        acdelay=acdelay+rt-ToH(i);

                        acdelay_sec=acdelay_sec+(rt-ToH(i))^2;

                        frH(i)=0;

                        %firh(i)=0;
                        hols(i)=0;
                        ns(i)=ns(i)+1;
                        ql(i)=ql(i)-aa;
                        succ=1;

                    elseif flagc(i)==1
                            hols(i)=hols(i)+1;

                    end
                end


                if succ==1
                    sx=aa;
                    %sx=aa;
                    flag_ch=1;
                else
                    flag_ch=0;
                    sx=rts;
                    %sx=aa;
                end

            end
        end
        
        
        
    else % deal with the case when x0!=0
    
        % set the channel status
        if flag_ch==1  % channel is busy
            if xn==sx || xn>sx
                flag_ch=0;            
                xn=0;
            else
                xn=xn+1;
            end
        else
            
            if sum(cons)~=0
                flagc=cons;
                xn=1;
                %xn=0;
                flag_ch=1;

                succ=0;
                Erand=zeros(n,1);

                for i=1:n
                    if flagc(i)==1
                        Erand(i)=exprnd(1);
                    end
                end

                for i=1:n
                    if Erand(i)/(sum(Erand)-Erand(i)+1/r0) >= rth
                        %calculate the output
                        outp=outp+1;
                        %calculate the access delay
                        acdelay=acdelay+rt-ToH(i);

                        acdelay_sec=acdelay_sec+(rt-ToH(i))^2;

                        frH(i)=0;

                        %firh(i)=0;
                        hols(i)=0;
                        ns(i)=ns(i)+1;
                        ql(i)=ql(i)-aa;
                        succ=1;

                    elseif flagc(i)==1
                            hols(i)=hols(i)+1;

                    end
                end


                if succ==1
                    sx=aa;
                    %sx=aa;
                else
                    sx=rts;
                    %sx=aa;
                end

            end
        end
    end
    


end


outp=outp*aa/rt;
C=outp*log(1+rth)/log(2);
for I=1:n
    p(I)=ns(I)/nre(I);
end

simp=mean(p);
